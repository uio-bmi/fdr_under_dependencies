import os
import shutil

import pandas as pd
from snakemake.utils import Paramspace

from scripts.analysis.utils import parse_yaml_file
from scripts.snakemake.generate_simulation_params import generate_simulation_params


workflow_config_yaml = config["workflow_config"]
workflow_config = parse_yaml_file(workflow_config_yaml)
workflow_reporting_config = workflow_config['reporting']
output_dir = os.path.join(workflow_config['paths']['output_dir'], "output")
analysis_config_dir = os.path.join(output_dir, "analysis_configs")

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

if not os.path.exists(analysis_config_dir):
    os.makedirs(analysis_config_dir)

shutil.copy(workflow_config_yaml, analysis_config_dir)

realworld_data = workflow_config['paths']['realworld_data']
simulation_params_output_path = f"{analysis_config_dir}/snakemake_simulation_params.tsv"

generate_simulation_params(workflow_config['simulating'], simulation_params_output_path)

simulation_params_df = pd.read_csv(simulation_params_output_path, sep="\t")
simulation_paramspace = Paramspace(simulation_params_df)


rule all:
    input:
        directory(f"{output_dir}/plots/histograms/"),
        directory(f"{output_dir}/plots/boxplots/")
        # expand('{output_dir}/statistical_testing/{params}.tsv',params=simulation_paramspace.instance_patterns,
        #     output_dir=output_dir)

rule generate_data:
    params:
        simulation = simulation_paramspace.instance
    output:
        data = f"{output_dir}/simulations/{simulation_paramspace.wildcard_pattern}.tsv",
        config = f"{analysis_config_dir}/sim_config_files/{simulation_paramspace.wildcard_pattern}.yaml"
    shell:
        'simulate_semi_real_world_data --config "{params.simulation}" --realworld_data_path {realworld_data} --output "{output.data}" --config_file_path "{output.config}"'


rule statistical_analysis:
    input:
        data = f"{output_dir}/simulations/{simulation_paramspace.wildcard_pattern}.tsv",
        config = f"{analysis_config_dir}/sim_config_files/{simulation_paramspace.wildcard_pattern}.yaml"
    output:
        f"{output_dir}/statistical_testing/{simulation_paramspace.wildcard_pattern}.tsv"
    shell:
        'statistical_test --config "{workflow_config_yaml}" --data_path "{input.data}" --sim_config "{input.config}" --output "{output}"'


rule concatenate_results:
    input:
        expand('{output_dir}/statistical_testing/{params}.tsv',params=simulation_paramspace.instance_patterns,
            output_dir=output_dir)
    output:
        f"{output_dir}/concatenated_results.tsv"
    run:
        df = pd.concat([pd.read_csv(f, sep="\t") for f in input])
        df.to_csv(output[0], sep="\t", index=False)


rule aggregate_results:
    input:
        concatenated_results = f"{output_dir}/concatenated_results.tsv"
    output:
        aggregated_results = f"{output_dir}/aggregated_results.tsv"
    shell:
        'calculate_histogram_results --concatenated_results "{input.concatenated_results}" --aggregated_results "{output.aggregated_results}"'


rule make_box_plots:
    input:
        concatenated_results = f"{output_dir}/concatenated_results.tsv"
    output:
        boxplots_dir= directory(f"{output_dir}/plots/boxplots/")
    shell:
        'plot_comparative_boxcharts --concatenated_results "{input.concatenated_results}" --reporting_config_file "{workflow_config_yaml}" --output_dir {output.boxplots_dir}'


rule plot_results:
    input:
        results_file = f"{output_dir}/aggregated_results.tsv"
    output:
        histograms_dir = directory(f"{output_dir}/plots/histograms/")
    shell:
        'plot_histograms --aggregated_results "{input.results_file}" --output_dir "{output.histograms_dir}" --with_title'
